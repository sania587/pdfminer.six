name: Continuous integration

on:
  push: # run when commits are added to master
    branches:
      - master
    tags:
      - '[0-9]+'  # match version tags with only numbers
  pull_request: # run on pr's against master
    branches:
      - master
  merge_group:
    types:
      - checks_requested

env:
  default-python: "3.10"
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

jobs:
  check-coding-style:
    name: Format and check coding style
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python ${{ env.default-python }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.default-python }}
      - name: Upgrade pip, Install nox
        run: |
          python -m pip install --upgrade pip
          python -m pip install nox
      - name: Check coding style
        run: |
          nox --error-on-missing-interpreters --non-interactive --session format

  check-static-types:
    name: Check static types
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python ${{ env.default-python }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.default-python }}
      - name: Upgrade pip, Install nox
        run: |
          python -m pip install --upgrade pip
          python -m pip install nox
      - name: Check static types
        run: |
          nox --error-on-missing-interpreters --non-interactive --session types

  tests:
    name: Run tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest ]
        python-version: [ "3.9", "3.10", "3.11", "3.12", "3.13" ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Determine pip cache directory
        id: pip-cache
        run: |
          echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT
      - name: Cache pip cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip${{ matrix.python-version }}
      - name: Upgrade pip and install nox
        run: |
          python -m pip install --upgrade pip
          python -m pip install nox pytest pytest-cov
      - name: Run tests with coverage
        run: |
          pytest --cov=pdfminer --cov-report=xml
      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage.xml

  build-docs:
    name: Test building docs
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python ${{ env.default-python }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.default-python }}
      - name: Upgrade pip and install nox
        run: |
          python -m pip install --upgrade pip
          python -m pip install nox
      - name: Build docs
        run: |
          nox --error-on-missing-interpreters --non-interactive --session docs

  sonarcloud:
    name: SonarCloud Scan
    runs-on: ubuntu-latest
    needs: [tests]  # wait until tests pass
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download coverage artifact
        uses: actions/download-artifact@v4
        with:
          name: coverage

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.organization=sania587
            -Dsonar.projectKey=sania587_pdfminer.six
            -Dsonar.python.coverage.reportPaths=coverage.xml

  publish:
    name: Publish to PyPi
    runs-on: ubuntu-latest
    needs:
      - check-coding-style
      - check-static-types
      - tests
      - build-docs
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"
      - name: Install pypa/build
        run: >-
          python3 -m pip install build --user
      - name: Build a binary wheel and a source tarball
        run: python3 -m build
      - name: Generate changelog
        run: sed '1,/## \[/d;/## \[/Q' CHANGELOG.md > ${{ github.workspace }}-CHANGELOG.md
      - name: Publish package to PyPi
        if: startsWith(github.ref, 'refs/tags')
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
      - name: Create GitHub release
        if: startsWith(github.ref, 'refs/tags')
        uses: softprops/action-gh-release@v1
        id: create_release
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          body_path: ${{ github.workspace }}-CHANGELOG.md
          files: |
            dist/*.tar.gz
            dist/*.whl
